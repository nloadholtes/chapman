#!/usr/bin/env python
"""Usage:
        chapmanev <config> [options]

Options:
  -h --help              show this help message and exit
  -m --messages=REGEX    regex of messages to monitor [default: .*]
"""

import os
import re
import time
import logging
from cPickle import loads
from datetime import datetime

from docopt import docopt
from pyramid.paster import bootstrap

from chapman import model as M
from chapman import Actor

log = None

def main(args):
    args = docopt(__doc__)
    log.info('Starting chapmanev')
    mainloop(args)

def mainloop(args):
    db = M.doc_session.db
    evcoll = db.chapman.event
    doc = db.chapman.sequence.find_one(dict(_id='event'))
    if doc:
        last = doc['next']
    while True:
        spec = {
            '_id': { '$gt': last },
            'name': re.compile(args['--messages'])}
        q = evcoll.find(spec, tailable=True, await_data=True)
        q = q.sort('$natural')
        for ev in q:
            now = datetime.utcnow()
            ts = ev.get('ts', now)
            elapsed = now-ts
            a = Actor.by_id(ev['actor_id'])
            if a:
                sactor = repr(a)
            else:
                sactor = '<Unknown Actor %s>' % ev['actor_id']
            log.info('%s %s (latency %sms)', ev['name'], sactor,
                     1000.0 * elapsed.total_seconds())
            last = ev['_id']
        time.sleep(1)
       
if __name__ == '__main__':
    args = docopt(__doc__)
    bootstrap(args['<config>'])
    logging.config.fileConfig(
        args['<config>'],
        defaults=dict(here=os.getcwd()))
    log = logging.getLogger('chapmanev')
    main(args)
