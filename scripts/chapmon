#!/usr/bin/env python
"""Usage:
        chapmon <config> [options]

Options:
  -h --help                 show this help message and exit
"""

import time
import logging

from docopt import docopt
from pyramid.paster import bootstrap, setup_logging

log = None


def main(args, app_context):
    from chapman import model as M

    while True:
        task_stat_cols = M.TaskState.m.collection.distinct('status')
        msg_stat_cols = M.Message.m.collection.distinct('s.status')
        all_cols = task_stat_cols + msg_stat_cols
        l_fmt = ['%10s'] * len(task_stat_cols)
        l_fmt.append('|')
        l_fmt += ['%10s'] * len(msg_stat_cols)
        fmt = ' '.join(l_fmt)
        log.info(fmt, *all_cols)
        for x in range(10):
            stats = M.TaskState.m.collection.map_reduce(
                'function(){emit({s:this.status}, 1)}',
                'function(key, values) {return Array.sum(values);}',
                {'inline': 1})
            results = dict(
                (doc['_id']['s'], doc['value'])
                for doc in stats['results'])
            ts_vals = [
                results.get(cname, 0)
                for cname in task_stat_cols]
            stats = M.Message.m.collection.map_reduce(
                'function(){emit({s:this.s.status}, 1)}',
                'function(key, values) {return Array.sum(values);}',
                {'inline': 1})
            results = dict(
                (doc['_id']['s'], doc['value'])
                for doc in stats['results'])
            msg_vals = [
                results.get(cname, 0)
                for cname in msg_stat_cols]
            log.info(fmt, *(ts_vals + msg_vals))
            time.sleep(2)

if __name__ == '__main__':
    args = docopt(__doc__)
    setup_logging(args['<config>'])
    app_context = bootstrap(args['<config>'])
    log = logging.getLogger('chapmand')
    main(args, app_context)
