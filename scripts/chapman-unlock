#!/usr/bin/env python
"""Usage:
        chapman-unlock <config> [options]

Recover jobs that are 'busy' on dead workers

Options:
  -h --help                 show this help message and exit
"""

import os
import time
import socket
import logging
import threading

from docopt import docopt
from pyramid.paster import bootstrap

log = None

def main(args):
    from chapman import model as M
    chan = M.Event.channel()
    messages = []
    # Thread to capture pongs
    t = threading.Thread(target=target, args=(chan,messages))
    t.setDaemon(True)
    t.start()
    chan.pub('ping')
    log.info('Sending ping...')
    time.sleep(10)
    log.info('Responses: %r', messages)
    living_workers = list(set(msg['data'] for msg in messages))
    dead_actors = set()
    for a in M.ActorState.m.collection.find(
        { 'status': 'busy',
          'worker': { '$nin': living_workers } },
        { '_id': 1, 'worker': 1 }):
        dead_actors.add(a['_id'])
        log.info('... found dead worker %s (%r)',
                 a['worker'], a)
    dead_actors = list(dead_actors)
    if dead_actors:
        r = M.Message.m.collection.update(
            { 'aid': { '$in': dead_actors } },
            { '$set': { 'stat': 'ready', 'wkr': None } },
            multi=True)
        log.info('Message unlock: %r', r)
        r = M.ActorState.m.collection.update(
            { '_id': { '$in': dead_actors } },
            { '$set': { 'status': 'ready' } },
            multi=True)
        log.info('Actor unlock: %r', r)
    else:
        log.info('Nothing is dead, so not unlocking anything')

def target(chan, messages):
    @chan.sub('pong')
    def handler(chan, msg):
        messages.append(msg)
    while True:
        chan.handle_ready(raise_errors=True, await=True)
        time.sleep(0.1)

class EventCapture(object):

    def __init__(self, name, verbose=False):
        self._name = name
        self._t = None
        self._exit = False
        self._events = []
        self._verbose = verbose

    def __enter__(self):
        self._t = threading.Thread(
            target=self._capture)
        self._exit = False
        self._events = []
        self._t.start()
        return self

    def __exit__(self, ex_type, ex_value, ex_tb):
        self._exit = True

    def _capture(self):
        from chapman import model as M
        doc = M.Sequence.m.get(_id='event')
        if doc: last = doc._next
        else: last = 0
        while not self._exit:
            q = M.Event.m.find(
                {'_id': {'$gt': last },
                 'name': self._name })
            q = q.hint([('$natural',1)])
            for ev in q:
                if self._verbose:
                    print ev
                self._events.append(ev)
                last = ev._id

    def __iter__(self):
        return iter(self._events)

if __name__ == '__main__':
    args = docopt(__doc__)
    logging.config.fileConfig(
        args['<config>'],
        defaults=dict(here=os.getcwd()))
    log = logging.getLogger('chapmand')
    log.info('Begin bootstrap')
    bootstrap(args['<config>'], options=dict(noweb='true'))
    log.info('Bootstrap complete')
    main(args)
