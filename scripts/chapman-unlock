#!/usr/bin/env python
"""Usage:
        chapman-unlock <config> [options]

Recover jobs that are 'busy' on dead workers

Options:
  -h --help                 show this help message and exit
"""

import os
import time
import socket
import logging
from datetime import datetime

from docopt import docopt
from pyramid.paster import bootstrap

log = None

def main(args):
    from chapman import model as M
    chan = M.Message.channel.new_channel()
    workers = get_live_workers(chan)
    for msg in M.Message.m.find(
        { 's.status': { '$in': [ 'queued', 'busy' ] },
          's.w': { '$nin': workers } }):
        import ipdb; ipdb.set_trace()


def get_live_workers(chan):
    workers = []
    @chan.sub('pong')
    def save_pongs(chan, msg):
        workers.append(msg['data']['worker'])
    log.info('Sending ping...')
    chan.pub('ping', {'ts_ping': datetime.utcnow(),
                      'worker': '*' } )
    for x in range(10):
        chan.handle_ready(raise_errors=True, await=True)
        time.sleep(0.1)
    log.info('Responses: %r', workers)
    return workers

def target():
    from chapman import model as M
    chan = M.Message.channel.new_channel()
    @chan.sub('pong')
    def handler(chan, msg):
        now = datetime.utcnow()
        data = msg['data']
        elapsed = now - data['ts_ping']
        log.info('%s: %.1fms', data['worker'], 1000 * elapsed.total_seconds())
    while True:
        chan.handle_ready(raise_errors=True, await=True)
        time.sleep(0.1)
if __name__ == '__main__':
    args = docopt(__doc__)
    logging.config.fileConfig(
        args['<config>'],
        defaults=dict(here=os.getcwd()))
    log = logging.getLogger('chapmand')
    log.info('Begin bootstrap')
    bootstrap(args['<config>'], options=dict(noweb='true'))
    log.info('Bootstrap complete')
    main(args)
